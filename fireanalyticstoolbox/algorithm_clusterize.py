# -*- coding: utf-8 -*-

"""
/***************************************************************************
 FireToolbox
                                 A QGIS plugin
 A collection of fire insights related algorithms
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-30
        copyright            : (C) 2023 by Fernando Badilla Veliz - Fire2a.com
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Fernando Badilla Veliz - Fire2a.com"
__date__ = "2023-08-30"
__copyright__ = "(C) 2023 by Fernando Badilla Veliz - Fire2a.com"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

from pathlib import Path

import processing
from fire2a.raster import get_rlayer_data, get_rlayer_info
from qgis.core import (QgsFeatureSink, QgsMessageLog, QgsProcessing, QgsProcessingAlgorithm,
                       QgsProcessingParameterDefinition, QgsProcessingParameterEnum, QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterMatrix, QgsProcessingParameterMultipleLayers, QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterLayer, QgsVectorLayer)
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon

from .algorithm_utils import write_log
from .assets.resources import *


class ClusterizeAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT_RASTER = "OutputRaster"
    OUTPUT_POLYGONS = "OutputPolygons"
    INPUT_RASTERS = "InputRasters"
    MIN_SRFCE = "MinimumSurface"
    # MAX_SRFCE = "MaximumSurface"
    DST_TRSHLD = "DistanceThreshold"
    TTL_CLSTRS = "TotalClusters"
    # NEIGHBORS = "NeighborConnectivity"
    MATRIX = "Matrix"

    def initAlgorithm(self, config):
        """define the inputs and output"""
        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                name=self.INPUT_RASTERS,
                description=self.tr("Input rasters to clusterize"),
                layerType=QgsProcessing.TypeRaster,
                defaultValue=[QgsProcessing.TypeRaster],
                optional=False,
            )
        )

        thr_qppn = QgsProcessingParameterNumber(
            name=self.DST_TRSHLD,
            description=self.tr("Distance threshold [adjusted observations]"),
            type=QgsProcessingParameterNumber.Double,  # ,Integer
            defaultValue=10.0,
            optional=True,
            minValue=0.0,
            # maxValue=420.666,
        )
        thr_qppn.setMetadata({"widget_wrapper": {"decimals": 2}})
        # thr_qppn.setFlags(thr_qppn.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(thr_qppn)

        # integer
        tcl_qppn = QgsProcessingParameterNumber(
            name=self.TTL_CLSTRS,
            description=self.tr("Total clusters"),
            type=QgsProcessingParameterNumber.Integer,
            # defaultValue = 0,
            optional=True,
            minValue=2,
            # maxValue=13,
        )
        # tcl_qppn.setFlags(tcl_qppn.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(tcl_qppn)

        # name: str, description: str = '', numberRows: int = 3, hasFixedNumberRows: bool = False, headers: Iterable[str] = [], defaultValue: Any = None, optional: bool = False
        self.addParameter(
            QgsProcessingParameterMatrix(
                name=self.MATRIX,
                description=self.tr("Raster Configuration Matrix (use same order than input rasters)"),
                headers=["scaling_strategy", "no_data_strategy", "fill_value"],  # , "weight"
            )
        )

        min_qppn = QgsProcessingParameterNumber(
            name=self.MIN_SRFCE,
            description=self.tr("Minimum surface [pixels]"),  # [ha]
            type=QgsProcessingParameterNumber.Integer,
            # defaultValue=1,
            optional=True,
            # minValue=0.0001,
            minValue=1,
            # maxValue=420.666,
        )
        # min_qppn.setMetadata({"widget_wrapper": {"decimals": 1}})
        min_qppn.setFlags(min_qppn.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(min_qppn)

        # max_qppn = QgsProcessingParameterNumber(
        #     name=self.MAX_SRFCE,
        #     description=self.tr("Maximum surface [ha]"),
        #     type=QgsProcessingParameterNumber.Double,
        #     defaultValue=11,
        #     optional=False,
        #     minValue=-1.2345,
        #     maxValue=420.666,
        # )
        # max_qppn.setMetadata({"widget_wrapper": {"decimals": 1}})
        # self.addParameter(max_qppn)

        # enum
        # nbc_qppe = QgsProcessingParameterEnum(
        #     name=self.NEIGHBORS,
        #     description=self.tr("Neighbor connectivity"),
        #     options=["4", "8"],
        #     allowMultiple=False,
        #     defaultValue="4",
        #     optional=False,
        #     usesStaticStrings=True,
        # )
        # nbc_qppe.setMetadata(
        #     {
        #         "widget_wrapper": {
        #             "icons": [
        #                 QIcon(":/plugins/fireanalyticstoolbox/assets/4neighbors.svg"),
        #                 QIcon(":/plugins/fireanalyticstoolbox/assets/8neighbors.svg"),
        #             ]
        #         }
        #     }
        # )
        # nbc_qppe.setFlags(nbc_qppe.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        # self.addParameter(nbc_qppe)

        self.addParameter(QgsProcessingParameterRasterLayer(self.OUTPUT_RASTER, self.tr("Output raster")))
        self.addParameter(QgsProcessingParameterFeatureSink(self.OUTPUT_POLYGONS, self.tr("Output vector layer")))

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        raster_list = self.parameterAsLayerList(parameters, self.INPUT_RASTERS, context)
        feedback.pushDebugInfo(
            f"Input rasters:\n names: {[ r.name() for r in raster_list]}\ntypes:"
            f" {[ r.rasterType() for r in raster_list]}"
        )

        data_list, info_list = [], []
        for rlayer in raster_list:
            feedback.pushDebugInfo(f"Raster: {rlayer.name()}")
            data_list += [get_rlayer_data(rlayer)]
            info_list += [get_rlayer_info(rlayer)]

        matrix = self.parameterAsMatrix(parameters, self.MATRIX, context)
        feedback.pushDebugInfo(f"Matrix: {matrix=} {len(matrix)=} {type(matrix)=}")

        config_text = ""
        # ["scaling_strategy", "no_data_strategy", "fill_value", "weight"]
        for i, row in enumerate(matrix):

            feedback.pushDebugInfo(f"{row=}")
            config_text += '["' + info_list[i]["file"] + '"]\n'

            for j, col in enumerate(row):
                if col != "":
                    if j == 0:
                        config_text += "scaling_strategy = "
                    elif j == 1:
                        config_text += "no_data_strategy = "
                    elif j == 2:
                        config_text += "fill_value = "
                    config_text += '"' + col + '"\n'

        feedback.pushDebugInfo(f"Config text:\n{config_text}")

        # neighbors = self.parameterAsEnum(parameters, self.NEIGHBORS, context)
        # feedback.pushDebugInfo(f"neighbor connectivity: {neighbors}")

        total_clusters = self.parameterAsInt(parameters, self.TTL_CLSTRS, context)
        feedback.pushDebugInfo(f"total clusters: {total_clusters}")

        distance_threshold = self.parameterAsDouble(parameters, self.DST_TRSHLD, context)
        feedback.pushDebugInfo(f"distance threshold: {distance_threshold}")

        # max_surface = self.parameterAsDouble(parameters, self.MAX_SRFCE, context)
        # feedback.pushDebugInfo(f"maximum surface: {max_surface}")

        min_surface = self.parameterAsDouble(parameters, self.MIN_SRFCE, context)
        feedback.pushDebugInfo(f"minimum surface: {min_surface}")

        write_log(feedback, name=self.name())
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Clusterize"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "zexperimental"

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return ClusterizeAlgorithm()

    def shortDescription(self):
        return self.tr("This short description appear when hovering?")

    def helpUrl(self):
        return "https://fire2a.github.io/docs"

    def shortHelpString(self):
        return self.tr(
            """The short help string is the help on the rigth vertical tab when opening the algorithm dialog?"""
        )

    def helpString(self):
        return self.shortHelpString()
